class Solution {
public:
    vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {
        vector<pair<int, int>> events;
        for (auto& building : buildings) {
            events.push_back({building[0], building[2]});
            events.push_back({building[1], -building[2]});
        }

        sort(events.begin(), events.end(), [](const pair<int, int>& a, const pair<int, int>& b) {
            if (a.first != b.first) return a.first < b.first;
            return a.second > b.second;
        });

        vector<vector<int>> result;
        priority_queue<int> maxHeap;
        maxHeap.push(0);

        unordered_map<int, int> removed;

        int prevHeight = 0;
        
        for (auto& event : events) {
            int x = event.first;
            int height = event.second;

            if (height > 0) {
                maxHeap.push(height);
            } else {
                removed[-height]++;
            }

            while (!maxHeap.empty() && removed[maxHeap.top()] > 0) {
                removed[maxHeap.top()]--;
                maxHeap.pop();
            }

            int currHeight = maxHeap.top();
            if (currHeight != prevHeight) {
                result.push_back({x, currHeight});
                prevHeight = currHeight;
            }
        }

        return result;
    }
};
